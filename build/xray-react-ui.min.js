var xrayReactUiMin = (function () {
  'use strict';

  const xrayReactElemCN = 'xray-react-element';
  const xrayReactWrapperCN = 'xray-react-elements-wrapper';
  const xrayReactCompPathAttr = 'data-xray-react-components-path';
  const zIndex = 10000;

  var constants = {
    xrayReactElemCN,
    xrayReactWrapperCN,
    xrayReactCompPathAttr,
    zIndex
  };
  var constants_1 = constants.xrayReactElemCN;
  var constants_2 = constants.xrayReactWrapperCN;
  var constants_3 = constants.xrayReactCompPathAttr;
  var constants_4 = constants.zIndex;

  var constants$1 = /*#__PURE__*/Object.freeze({
    default: constants,
    __moduleExports: constants,
    xrayReactElemCN: constants_1,
    xrayReactWrapperCN: constants_2,
    xrayReactCompPathAttr: constants_3,
    zIndex: constants_4
  });

  var css = `
  .xray-react-enabled {
    margin-bottom: 50px !important;
  }
  .xray-react-elements-wrapper {
    bottom: 0;
    font-family: "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
    font-style: normal;
    left: 0;
    position: absolute;
    right: 0;
    top: 0;
  }
  .xray-react-element {
    background-color: rgba(0, 0, 255, 0.25);
    border: 2px solid blue;
    cursor: pointer;
    position: absolute;
  }
  .xray-react-element::before {
    align-self: center;
    color: white;
    content: attr(data-xray-react-element-name);
    display: table;
    font-size: 18px;
    font-weight: 400;
    left: 50%;
    position: absolute;
    right: 0;
    text-align: center;
    top: 50%;
    transform: translate(-50%, -50%);
  }
  .xray-react-element::after {
    background-color: darkblue;
    color: white;
    content: attr(data-xray-react-element-name);
    display: inline-block;
    font-size: 10px;
    left: 0;
    padding: 0 5px;
    position: absolute;
    top: 0;
  }
  .xray-react-element:hover,
  .xray-react-element.-highlighted {
    background-color: rgba(0, 0, 255, 0.75);
    border-color: cyan;
  }
  .xray-react-element:hover::before,
  .xray-react-element.-highlighted::before {
    color: cyan;
  }
  .xray-react-element:hover::after,
  .xray-react-element.-highlighted::after {
    background-color: cyan;
    color: darkblue;
  }
  .xray-react-element.-highlighted {
    z-index: 99999 !important;
  }
  .xray-react-action-bar {
    background-color: darkblue;
    bottom: 0;
    height: 50px;
    padding: 0 10px;
    position: fixed;
    width: 100vw;
    z-index: 999999;
  }
  .xray-react-actions-wrapper {
    align-items: center;
    display: flex;
    font-family: "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
    font-style: normal;
    height: inherit;
    max-width: 1200px;
  }
  #search-component {
    background-color: lightgray;
    border-radius: 3px;
    border: 0;
    font-size: 14px;
    margin-right: 10px;
    outline: 0;
    padding: 5px 10px;
    width: 50%;
  }
  .components-path {
    color: cyan;
    font-size: 12px;
    margin-left: 10px;
    width: 50%;
  }
`;

  var css$1 = /*#__PURE__*/Object.freeze({
    default: css,
    __moduleExports: css
  });

  var css$2 = ( css$1 && css ) || css$1;

  const styleTag = `<style class="xray-react-style-tag">${css$2}</style>`;
  const actionBar = `
  <div class="xray-react-action-bar">
    <div class="xray-react-actions-wrapper">
      <input id="search-component" type="text" placeholder="Search component by name..."/>
      <div class="components-path"></div>
    </div>
  </div>
`;

  var partials = {
    styleTag,
    actionBar
  };
  var partials_1 = partials.styleTag;
  var partials_2 = partials.actionBar;

  var partials$1 = /*#__PURE__*/Object.freeze({
    default: partials,
    __moduleExports: partials,
    styleTag: partials_1,
    actionBar: partials_2
  });

  var constants$2 = ( constants$1 && constants ) || constants$1;

  var partials$2 = ( partials$1 && partials ) || partials$1;

  const handleSearchChange = function(event) {
    let value = event.target.value.toLowerCase();
    let regExp = new RegExp(`^${value}|${value}$`);
    for (let elem of document.querySelectorAll(`.${constants$2.xrayReactElemCN}`)) {
      elem.classList.add('-highlighted');
      if (value.length >= 2 && elem.getAttribute('data-xray-react-element-search-name').match(regExp)) {
        elem.classList.add('-highlighted');
      } else {
        elem.classList.remove('-highlighted');
      }
    }
  };

  const createElemForComponent = function(elem, componentName) {
    let xrayReactElem = document.createElement('div');
    let boundingClientRect = elem.getBoundingClientRect();
    xrayReactElem.className = constants$2.xrayReactElemCN;
    xrayReactElem.setAttribute('data-xray-react-element-name', componentName);
    xrayReactElem.setAttribute('data-xray-react-element-search-name', componentName.toLowerCase());
    xrayReactElem.style.height = boundingClientRect.height + 'px';
    xrayReactElem.style.width = boundingClientRect.width + 'px';
    xrayReactElem.style.top = boundingClientRect.top + window.scrollY + 'px';
    xrayReactElem.style.right = boundingClientRect.right + window.scrollX + 'px';
    xrayReactElem.style.bottom = boundingClientRect.bottom - window.scrollY + 'px';
    xrayReactElem.style.left = boundingClientRect.left - window.scrollX + 'px';
    xrayReactElem.style.zIndex = constants$2.zIndex;
    return { elem, xrayReactElem };
  };

  const getComponentObj = function(elem) {
    for (const key of Object.keys(elem)) {
      if (key.startsWith('__reactInternalInstance$')) {
        let fiberNode = elem[key];
        if (fiberNode._currentElement) {
          let owner = fiberNode._currentElement._owner;
          let fiber = owner && owner._instance;
          if (fiber) {
            return { name: fiber.constructor.name, uid: `${owner._mountIndex}${owner._mountOrder}` };
          }
        } else {
          let fiber = fiberNode.return && fiberNode.return.stateNode && fiberNode.return.stateNode._reactInternalFiber;
          if (fiber) return { name: fiber.type.name };
        }
      }
    }
    return {};
  };

  const searchAndCreateComponentCached = function() {
    let uids = [];
    return function(...args) {
      let elem = args[0];
      let { name, uid } = getComponentObj(elem);

      if (name) {
        if (uid) {
          if (!uids.includes(uid)) {
            uids.push(uid);
            return createElemForComponent(elem, name);
          }
        } else {
          return createElemForComponent(elem, name);
        }
      }
      return null;
    };
  };

  const addAsoluteComponentPath = function(elem, xrayReactElem) {
    let structure = xrayReactElem.getAttribute('data-xray-react-element-name') || '';
    while (elem.parentNode) {
      elem = elem.parentNode;
      let { name: component } = getComponentObj(elem);
      if (component) structure = component + ' -> ' + structure;
    }
    xrayReactElem.setAttribute(constants$2.xrayReactCompPathAttr, structure);
  };

  const onXrayReactMouseover = function(event) {
    let { target } = event;
    if (target.classList.contains(constants$2.xrayReactElemCN)) {
      let componentsPath = target.getAttribute(constants$2.xrayReactCompPathAttr) || '';
      document.querySelector('.xray-react-actions-wrapper .components-path').innerHTML = componentsPath;
    }
  };

  const toggleXrayReact = function(enable) {
    let body = document.body;
    if (body.classList.contains('xray-react-enabled')) {
      body.classList.remove('xray-react-enabled');
      let xrayReactElementsWrapper = document.querySelector(`.${constants$2.xrayReactWrapperCN}`);
      let xrayReactActionBar = document.querySelector('.xray-react-action-bar');
      let xrayReactStyleTag = document.querySelector('.xray-react-style-tag');
      if (xrayReactElementsWrapper) xrayReactElementsWrapper.remove();
      if (xrayReactActionBar) xrayReactActionBar.remove();
      if (xrayReactStyleTag) xrayReactStyleTag.remove();
      body.removeEventListener('mouseover', onXrayReactMouseover);
    } else {
      body.classList.add('xray-react-enabled');
      let xrayReactObjects = [];
      let searchAndCreateComponent = searchAndCreateComponentCached();
      for (let elem of body.getElementsByTagName('*')) {
        let xrayReactObj = searchAndCreateComponent(elem);
        if (xrayReactObj) xrayReactObjects.push(xrayReactObj);
      }
      for (let { elem, xrayReactElem } of xrayReactObjects) {
        addAsoluteComponentPath(elem, xrayReactElem);
      }
      let xrayReactElementsWrapper = document.createElement('div');
      xrayReactElementsWrapper.className = constants$2.xrayReactWrapperCN;
      xrayReactElementsWrapper.append(...xrayReactObjects.map(obj => obj.xrayReactElem));
      body.append(xrayReactElementsWrapper);
      document.head.insertAdjacentHTML('beforeend', partials$2.styleTag);
      body.insertAdjacentHTML('beforeend', partials$2.actionBar);
      document.getElementById('search-component').addEventListener('input', handleSearchChange);
      body.addEventListener('mouseover', onXrayReactMouseover);
    }
  };

  const handleXrayReactToggle = function() {
    let keyMap = { 16: false, 82: false, 88: false };
    document.body.addEventListener('keydown', function(event) {
      if (event.keyCode in keyMap) {
        keyMap[event.keyCode] = true;
        if (keyMap[16] && keyMap[82] && keyMap[88]) {
          toggleXrayReact();
        }
      }
    });
    document.body.addEventListener('keyup', function(event) {
      if (event.keyCode in keyMap) {
        keyMap[event.keyCode] = false;
      }
    });
  };

  const enableXrayReact = function() {
    window.onload = handleXrayReactToggle();
  };

  var uiUtils = {
    enableXrayReact
  };
  var uiUtils_1 = uiUtils.enableXrayReact;

  var uiUtils$1 = /*#__PURE__*/Object.freeze({
    default: uiUtils,
    __moduleExports: uiUtils,
    enableXrayReact: uiUtils_1
  });

  var require$$0 = ( uiUtils$1 && uiUtils ) || uiUtils$1;

  require$$0.enableXrayReact();

  var xrayReactUi = {

  };

  return xrayReactUi;

}());
